#ifndef GPSTRACKING_H
#define GPSTRACKING_H

#include "ui_mainwindow.h"
#include "../driver/QSerial.h"
#include "gpscoordinate.h"
#include <QtWebKit>
#include <QTimer>
#include <QWebView>
#include <QList>
#include <QTableWidget>
#include <QFileDialog>
#include <QString>
#include <QPixmap>
#include <QMessageBox>
#include "driver/frame.h"
#include <QVariant>
#include <QWebFrame>
#include <QStringList>
#include <QWebElement>
#include <QNetworkConfigurationManager>
#include <QSound>


class MainWindow;
class GPSTracking:public QWidget
{
    Q_OBJECT

public:
   GPSTracking(Ui::MainWindow* u,QmySerial* serial);
   ~GPSTracking();
   QList<GPSCoordinate> coordinateTracking;
   GPSCoordinate currentCoords;
   QNetworkConfigurationManager *mgr;
private:
    int track;
    float latitude;
    float longitude;
    float height;
    int counter;
    int row;
    Ui::MainWindow* ui;
    QmySerial* serial;
    QStandardItemModel* model;
    QString dateTimeSysString;
    void showGoogleLogo();
    void setCoordsView();
    void setCoordsData();
    void loadTracking();
    void evalJs(const QString &jsfunction);
    void enableTelemetry();

 public slots:
    void loadDialog();
    void frameGPSRecieved(QList<float>* data);
    void saveTracking();
    void clearTracking();
    void handleSettings();
    void setJsObject();
    void handleMapSelection(int option);
    void transferCoords(bool);
    void showPlannedPath(QList<GPSCoordinate> list);
    void showPlannedCoord(GPSCoordinate a);
    void clearPlannedPath(void);
    void start();
    void stop();
};
#endif // GPSTRACKING_H
